1.Write a PL/SQL block to read a number and check whether it is a palindrome or not.

DECLARE 
SUM_1 NUMBER(10) := 0;
N NUMBER(10) := &N;
A NUMBER(10) := 0;
K NUMBER(10);
BEGIN
K := N;
LOOP
	A := MOD(N,10);
	SUM_1 := SUM_1 *10+A;
	N := TRUNC(N/10);
	EXIT WHEN N=0;
END LOOP;
IF (SUM_1 = K) THEN
DBMS_OUTPUT.PUT_LINE(K||' IS A PALINDROME NUMBER');
ELSE
DBMS_OUTPUT.PUT_LINE(K||' IS NOT A PALINDROME NUMBER');
END IF;
END;
/
Enter value for n: 1234321
old   3: N NUMBER(10) := &N;
new   3: N NUMBER(10) := 1234321;
1234321 IS A PALINDROME NUMBER
PL/SQL procedure successfully completed.
*********************************************************************************************************************
2.Write a PL/SQL Program to print the first n fibonacci numbers.
SQL> declare
  2  n number:= &n;
  3  a number:=0;
  4  b number:=1;
  5  c number;
  6  begin
  7  dbms_output.put_line(a);
  8  dbms_output.put_line(b);
  9  for i in 2..n-1 loop
 10   c:=a+b;
 11   a:=b;
 12   b:=c;
 13   dbms_output.put_line(c);
 14  end loop;
 15  dbms_output.put_line('are the first '||n||' fibonnaci numbers');
 16  end;
 17  /
Enter value for n: 5
old   2: n number:= &n;
new   2: n number:= 5;
0
1
1
2
3
are the first 5 fibonnaci numbers

PL/SQL procedure successfully completed.
*********************************************************************************************************************
3.Write a PL/SQL block which will accept a number and checks if it is a prime number or not. 
 declare
 n number :=&n;
 c number:=0;
 begin
 for I in 2..sqrt(n)+1 loop
    if(mod(n,i)=0)
    then c:=c+1;
    exit;
                   end if;
 end loop;
 if c=0
 then dbms_output.put_line('Prime Number');
 else
 dbms_output.put_line('Not a Prime Number');
 end if;
 end;
/
Enter value for n: 55
old   2: n number :=&n;
new   2: n number :=55;
Not a Prime Number

PL/SQL procedure successfully completed.

**************************************************************************************************************************
5.Write a Pl/SQL program using FOR loop to insert ten rows into a database table
SQL> create table demotable(
  2  N number ,
  3  N2 number,
  4  N3 number);

Table created.

SQL> ed
Wrote file afiedt.buf

  1  declare
  2  i number ;
  3  begin
  4  for i in 1..10 loop
  5  insert into demotable values(i,i*i,i*i*i);
  6  end loop;
  7* end;
SQL> /

PL/SQL procedure successfully completed.

SQL> select * from demotable;

         N         N2         N3
---------- ---------- ----------
         1          1          1
         2          4          8
         3          9         27
         4         16         64
         5         25        125
         6         36        216
         7         49        343
         8         64        512
         9         81        729
        10        100       1000

10 rows selected.
************************************
declare
d demotable%rowtype ;
n demotable.name%type;
r demotable.roll%type;
begin
insert into demotable values(&n,&r);
dbms_output.put_line('successfully inserted');
end;
/
*****************************************************************************************************************************
7.Create a table employee with eno, ename, and basic_pay attributes, insert 3 to 4 records and write a PL/SQL block to calculate the Gross salary & Net salary for an employee for the following conditions:
HRA is 15% of basic.
DA is 62% of basic.
PF is 780/- if gross salary exceeds 8000, otherwise 600/-.
Professional tax is 2% of basic.
and then print the employee no, name, hra, da, pf, ptax, gross salary & net salary for that employee.

SQL> create table employee1(
  2  eno number,
  3  ename varchar(20),
  4  basic_pay number);
  Table created.

SQL> insert into employee1 values(&eno,&ename,&basic_pay);
Enter value for eno: 19
Enter value for ename: 'Praveena'
Enter value for basic_pay: 5000
old   1: insert into employee1 values(&eno,&ename,&basic_pay)
new   1: insert into employee1 values(19,'Praveena',5000)

1 row created.

SQL> /
Enter value for eno: 52
Enter value for ename: 'Mounika'
Enter value for basic_pay: 8000
old   1: insert into employee1 values(&eno,&ename,&basic_pay)
new   1: insert into employee1 values(52,'Mounika',8000)

1 row created.

SQL> /
Enter value for eno: 60
Enter value for ename: 'Bhuvana'
Enter value for basic_pay: 10000
old   1: insert into employee1 values(&eno,&ename,&basic_pay)
new   1: insert into employee1 values(60,'Bhuvana',10000)

1 row created.

declare
e employee1.eno%type:=&e;
n employee1.ename%type;
gross number;
net number;
sal number;
hra number;
da number;
pf number;
ptax number;
begin
select basic_pay,ename into sal,n from employee1 where eno=e;
hra:=0.15*sal;
da:=0.62*sal;
if sal>8000
then pf:=780;
else
 pf:=600;
end if;
ptax:=0.02*sal;
gross:=hra+da+sal;
net:=gross-pf-ptax;
dbms_output.put_line('emp no='||e||' '||'emp name='||n||' '||'emp hra='||hra||' '||'emp da='||da||' '||'emp pf='||pf||' '||'emp ptax='||ptax||' '||'emp gross='||gross||' '||'emp net='||net);
end;
/
output:
Enter value for e: 60
old   2: e employee1.eno%type:=&e;
new   2: e employee1.eno%type:=60;
emp no=60 emp name=Bhuvana emp hra=1500 emp da=6200 emp pf=780 emp ptax=200 emp
gross=17700 emp net=16720

PL/SQL procedure successfully completed.
****************************************************************************************
8.Consider the following relation schemas
Emp
empno	ename	sal	deptno
 Del_History
deptno	Rows_deleted	
date
Write a PL/SQL block to delete records of all employees who belong to a particular department and then record the dno, no of rows deleted and date on which deletion occurred in the Del_History table using implicit cursors. 

SQL> create table emp8(
  2  empid number,
  3  name varchar(20),
  4  salary number,
  5  dno number);

Table created.

  1  create table del_history8(
  2  dno number,
  3  rows_deleted number,
  4* date1 date)
SQL> /

Table created.

SQL> declare
  2  no number:=&no;
  3  no_rows number;
  4  begin
  5  delete from emp8 where dno=no;
  6  if SQL%FOUND then
  7  no_rows :=SQL%ROWCOUNT;
  8  insert into del_history8 values(no,no_rows,to_char(sysdate));
  9  end if;
 10  end;
 11  /
Enter value for no: 1
old   2: no number:=&no;
new   2: no number:=1;

PL/SQL procedure successfully completed.
*************************************************************************************************
9.Given the table EMPLOYEE (EmpNo, Name, Salary, Designation, DeptID) write a cursor to select the five highest and lowest paid employees from the table.

 SQL>declare
  2  row emp%rowtype;
  3  cursor cursor1 is
  4  select * from (select * from emp order by sal desc)
  5  where rownum<=5;
  6  cursor cursor2 is
  7  select * from (select * from emp order by sal  )
  8  where rownum<=5;
  9  begin
 10  dbms_output.put_line('First five highest paid employees');
 11  open cursor1;
 12  loop
 13  fetch cursor1 into row;
 14  exit when cursor1%notfound;
 15  dbms_output.put_line(row.ename||' ' ||row.sal);
 16  end loop;
 17  dbms_output.put_line('First five lowest paid employees');
 18  open cursor2;
 19  loop
 20  fetch cursor2 into row;
 21  exit when cursor2%notfound;
 22  dbms_output.put_line(row.ename||' ' ||row.sal);
 23  end loop;
 24* end;
SQL> /
First five highest paid employees
KING 5000
SCOTT 3200
FORD 3000
JONES 2975
BLAKE 2850
First five lowest paid employees
SMITH 800
JAMES 950
ADAMS 1100
MARTIN 1250
WARD 1250

PL/SQL procedure successfully completed.
*************************************************************************************************
10.Consider the following relation schemas

Bank_Main
Acc_no	Name	Address	Acc-type	Curr_balance
Bank_Trans
Acc_no	Tr_type	Tr_date	Tr_amt	Upd_flag

Where acc_type is S – savings C- current 
Tr_type is D – deposit W – withdrawal 
Write a PL/SQL block to update master table’s (i.e., Bank_Main) curr_balance field with transaction details from transaction file (i.e., Bank_Trans) and also change the status of the Upd_flag field of transaction table to ‘Y’ once the updation is complete.

10th question tables
BANK_MAIN
ACC_NO	Name	address	ACC_TYPE	Current_balance
1001	Raju	Guntur	S	15000
1002	Bindu	Vizag	S	10000
1003	Abhilash	Hyderabad	C	10000
1004	babu	vijayawada	C	9000

BANK_TRANS
ACC_NO	Tr_type	Tr_date	Tr_amt	Upd_flag
1001	D	20 sep 2007	5000	N
1002	W	20 sep 2007	2000	Y
1003	D	20 sep 2007	4000	Y
1001	W	20 sep 2007	10000	N

ans:
SQL>  create table bank_trans(
  2   acc_no number,
  3   tr_type varchar(5),
  4   tr_date date,
  5   tr_amt number,
  6   upd_flag varchar(5));

Table created.

SQL> create table bank_main(
  2  acc_no number,
  3  name varchar(20),
  4  address varchar(20),
  5  acc_type varchar(5),
  6  curr_balance number);

Table created.
SQL>  declare
  2   no number;
  3   cur_bal number;
  4   amount number;
  5  status varchar(5);
  6   CURSOR cur1 is
  7   select bank_trans.acc_no,tr_amt,cur_bal ,tr_type
  8  from bank_trans,bank_main
  9  where upd_flag='N' and
 10  bank_main.acc_no=bank_trans.acc_no;
 11   begin
 12   open cur1;
 13   LOOP
 14   fetch cur1 into no,amount,cur_bal,status;
 15   exit when cur1%NOTFOUND;
 16  if status='D' then
 17   update bank_main set curr_balance=curr_balance+amount
 18   where acc_no=no;
 19   update bank_trans set upd_flag ='Y' where acc_no=no;
 20  else
 21  update bank_main set curr_balance=curr_balance-amount
 22   where acc_no=no;
 23   update bank_trans set upd_flag ='Y' where acc_no=no;
 24   end if;
 25  end loop;
 26  end;
SQL> /

PL/SQL procedure successfully completed.

SQL> select * from bank_main;

    ACC_NO NAME                 ADDRESS              ACC_T CURR_BALANCE
---------- -------------------- -------------------- ----- ------------
      1001 Raju                 Guntur               S            10000
      1002 Bindhu               Vizag                S            10000
      1003 Abhilash             Hyderabad            C            10000
      1004 babu                 vijayawada           C             9000

SQL> select * from bank_trans;

    ACC_NO TR_TY TR_DATE       TR_AMT UPD_F
---------- ----- --------- ---------- -----
      1001 D     20-SEP-07       5000 Y
      1002 W     20-SEP-07       2000 Y
      1003 D     20-SEP-07       4000 Y
      1001 W     20-SEP-07      10000 Y

******************************************************************************************
12.	Write a PL/SQL block to check whether the quantity of any product in Inventory table is < 0. If so, using an exception display relevant message and update quantity to 0.

Inventory
Product_ID	Product_name	Quantity


PRODUCT_ID PRODUCT_NAME            QUALITY
---------- -------------------- ----------
         1 sorter                        9
         2 screw                         0
         3 bolt                        -10

SQL> declare
  2  id number:=&id;
  3  q number;
  4  negatity_quantity EXCEPTION;
  5  begin
  6  select quality into q from inventory where product_id=id;
  7  if(q<0) then
  8  RAISE negatity_quantity ;
  9  else
 10  dbms_output.put_line('quantity is '||q);
 11  end if;
 12  EXCEPTION
 13  when negatity_quantity then
 14  dbms_output.put_line('Invalid quantity');
 15  update inventory set quality=0 where product_id=id;
 16 END;
Enter value for id: 3
old   2: id number:=&id;
new   2: id number:=3;

PL/SQL procedure successfully completed.

SQL> select * from inventory;

PRODUCT_ID PRODUCT_NAME            QUALITY
---------- -------------------- ----------
         1 sorter                        9
         2 screw                         0
         3 bolt                          0
